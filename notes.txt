array:
  const arrayName = [];

array elements:
  1. [ "kimchi", "potato" ]     : each element has one item
  2. [{name:"kimchi",desc:"Korean"}, {name:"Bibimbap",desc:"Also Korean"}]
                                : each element has multiple types (?)

function:
  function functionName(propsToPass) { ... return (); } // need return since this is function

function arguments:
  1. functionName()             : nothing
  2. functionName(props)        : props object ("props" is a keyword)
  3. functionName({name, desc}) : multiple objects

forms of map function
  1. arrayName.map(dish => (<Food name={dish.name} desc={dish.desc} />))
  2. arrayName.map(function(dish) {<Food name={dish.name} desc={dish.desc} />})
  3. arrayName.map(functionName)
      functionName(dish) { return <Food name={dish.name} desc={dish.desc} />; }
      arguments to functionName is each element of arrayName

map function with keys (react internals only) - must always return something 
  arrayName.map(dish => (<Food key={dish.id} name={dish.name} desc={dish.desc} />))
    each element in arrayName has a component called "id" with unique numbers
  arrayName.map((dish, index) => <div key={index}>{dish.name}</div>)  // in case we don't have keys in dish   

Image tag (to show image through a link)
  <img src={linkToTheImage} alt={nameForTheImage} />

https://www.npmjs.com/package/prop-types
prop type check dependency (useful to check props)
  npm i prop-types  // terminal
  import PropTypes from "prop-types";   // on the top of the file I want to use the dependency
  componentName.propTypes = { // see console log to see if there is any error with prop types
    prop_one: PropTypes.string.isRequired, // isRequired means this "name" prop is required every time
    prop_two: PropTypes.string.isRequired,
    prop_three: PropTypes.number  // isRequired is not here -> "rating" prop is not required every time
  } // place outside any function

React class component
  - has state: class objects that WILL CHANGE
  class className extends React.Component { ... render(){return (...)}; }  // no return since this is not a function
                                                // needs render method
  functionName = () => {...};      // class method (JS)    
  functionName() { ... };          // same thing                                            
  { this.functionName }     // to call class method
  // NOT DO: { this.functionName() } <- this will just call a function every time it renders
  state = { count: 0,};     // to set state in class component
  { this.state.count }      // to use state
  this.state.count = 1;     // DO NOT mutate state directly (if we do this -> React will not render)
  this.setState({count: this.state.count + 1}) // to change the state (using this.count to update is not a good practice tho)
  this.setState(current => ({count: current.count + 1})) // to change state (better way)
                                                        // current gives current states
  - every time we change states -> React re-renders the render function

console log placement in render
  render() {
    console.log("this is the spot);       // place it before return in render 
    return(
      ...
    )
  };

useful functions we can use in the class component
  1. componentDidMount() { console.log("component mounted"); }      // this is called when component is created
  2. componentDidUpdate() { console.log("component updated"); }     // this is called whenever any state of the component is updated 
  3. componentDidUnMount() { console.log("component unmounted"); }  // this is called whenever component is gone

To fetch data (receive?) using "axios" dependency
  npm i axios 
  const movies = axios.get("link-to-the-data");     // to fetch (might take a while)
  - to tell JS to wait for a little bit of time:
      getMovies = async () => {  // this async (you need to wait for this function! -- for what?)
        const movies = await axios.get("https://yts-proxy.now.sh/list_movies.json");
      }             // ^ this await (for this axios!)
          // MUST USE "async" and "await" together

To fetch: note this!
  1. const movies = axios.get("link-to-the-data");      // regular way to fetch the whole movie data
  --> movies.data.data.movies                           // need to type these to get whatever data we want
  2. const {data: {data: {movies}}} = axios.get("link-to-the-data"); 
  --> movies                                            // now we can use data in a compact way

to setState
  this.setState({ movies: movies })
  this.setState({ movies })         // compact way (only works if state and variable have the same identifier)

If you use class, you need to use "className" instead of "class" for HTML styling


componentDidMount() {
  setTimeout(() => {
    this.setState({ isLoading: false })
  }, 6000); // setTimeout is JS. will be executed in 6 seconds (6000)
};  

https://www.npmjs.com/package/gh-pages?activeTab=readme
using gh-pages (to make our app work on website)
  npm i gh-pages
  - make sure to change app information from 'public/index.html'
    <title>Movie App</title>
  - in package.json file at the end 
    "homepage": "https://aspboy217.github.io/repo-name/"
              github username ^      project name ^   ^ make sure to have this
  - do "npm run build" in the terminal -> will create "build" directory in the project
  - in package.json file in "scripts"
    "deploy": "gh-pages -d build"
    "predeploy": "npm run build"
  - do "npm run deploy"
    check "Published" message at the end of the terminal output

https://www.npmjs.com/package/react-router-dom
using react-router-dom 
  - what router does: 
    if you are at "/" go to "Home.js"
    if you are at "/about" go to "About.js"
    router looks at the url and route to the right page
  npm i react-router-dom
  - in App.js file
    import { HashRouter, Route } from "react-router-dom";
  - if there is a url path in <HashRouter> ... </HashRouter>, router renters everything that has path
    path="/" ... path="/about"
    if usl is "/" -> react dom renders both.
    So we need to pass another prop: "exact={ true }"
  - in App.js return part:
      return( 
        <HashRouter>
          <Route path="/" exact={ true } component={ Home } /> // just put exact to the common link
          <Route path="/about" component={ About } />
        </HashRouter>
      );

To navigate between pages
  - wrong way: using html tags
      <a href="/">Home</a>
      <a href="/about">About</a>
    -> not works because executing this will kill react components
  - right way: using Link from 'react-router-dom'
      import { Link } from 'react-router-dom';
                &
      <Link to="/">Home</Link>
      <Link to="/about">About</Link> // cannot use this Link outside the router

https://www.npmjs.com/package/react-router-dom
Props between routes 
  - if we use react-router -> some props are passed into the component automatically
  - can send information about the clicked part to the component through the router
      <Link to={{
        pathname:'/movie-detail',
        state: {
          year, 
          title, 
          summary, 
          poster, 
          genres
        }
      }}>